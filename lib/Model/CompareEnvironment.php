<?php
/**
 * CompareEnvironment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Diffy
 *
 * API for visual regression testing tool Diffy
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CompareEnvironment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompareEnvironment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompareEnvironment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'env1' => 'string',
'env2' => 'string',
'commit_sha' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'env1' => null,
'env2' => null,
'commit_sha' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'env1' => 'env1',
'env2' => 'env2',
'commit_sha' => 'commitSha'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'env1' => 'setEnv1',
'env2' => 'setEnv2',
'commit_sha' => 'setCommitSha'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'env1' => 'getEnv1',
'env2' => 'getEnv2',
'commit_sha' => 'getCommitSha'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENV1_PROD = 'prod';
const ENV1_STAGE = 'stage';
const ENV1_DEV = 'dev';
const ENV1_BASELINE = 'baseline';
const ENV2_STAGE = 'stage';
const ENV2_PROD = 'prod';
const ENV2_DEV = 'dev';
const ENV2_BASELINE = 'baseline';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnv1AllowableValues()
    {
        return [
            self::ENV1_PROD,
self::ENV1_STAGE,
self::ENV1_DEV,
self::ENV1_BASELINE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnv2AllowableValues()
    {
        return [
            self::ENV2_STAGE,
self::ENV2_PROD,
self::ENV2_DEV,
self::ENV2_BASELINE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['env1'] = isset($data['env1']) ? $data['env1'] : null;
        $this->container['env2'] = isset($data['env2']) ? $data['env2'] : null;
        $this->container['commit_sha'] = isset($data['commit_sha']) ? $data['commit_sha'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEnv1AllowableValues();
        if (!is_null($this->container['env1']) && !in_array($this->container['env1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'env1', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnv2AllowableValues();
        if (!is_null($this->container['env2']) && !in_array($this->container['env2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'env2', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets env1
     *
     * @return string
     */
    public function getEnv1()
    {
        return $this->container['env1'];
    }

    /**
     * Sets env1
     *
     * @param string $env1 env1
     *
     * @return $this
     */
    public function setEnv1($env1)
    {
        $allowedValues = $this->getEnv1AllowableValues();
        if (!is_null($env1) && !in_array($env1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'env1', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['env1'] = $env1;

        return $this;
    }

    /**
     * Gets env2
     *
     * @return string
     */
    public function getEnv2()
    {
        return $this->container['env2'];
    }

    /**
     * Sets env2
     *
     * @param string $env2 env2
     *
     * @return $this
     */
    public function setEnv2($env2)
    {
        $allowedValues = $this->getEnv2AllowableValues();
        if (!is_null($env2) && !in_array($env2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'env2', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['env2'] = $env2;

        return $this;
    }

    /**
     * Gets commit_sha
     *
     * @return string
     */
    public function getCommitSha()
    {
        return $this->container['commit_sha'];
    }

    /**
     * Sets commit_sha
     *
     * @param string $commit_sha Gitbug commit SHA for sending github Check
     *
     * @return $this
     */
    public function setCommitSha($commit_sha)
    {
        $this->container['commit_sha'] = $commit_sha;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
